#BlueJ class context
comment0.target=Minesweeper
comment0.text=\r\n\ Title\:\ Minesweeper\r\n\ Author\:\ Joa\ Contreras\r\n\ Date\:\ 20/06/2024\r\n\ Version\:\ FINAL\ 1\r\n\ Purpose\:\ A\ Minesweeper\ game\ coded\ in\ Java\ and\ BlueJ\ as\ an\ assesment\ for\ the\ CSC223\ class.\r\n
comment1.params=
comment1.target=Minesweeper()
comment1.text=\r\n\ This\ is\ the\ Main\ method\ which\ is\ executed\ when\ the\ program\ first\ runs.\r\n\ It\ handles\ all\ the\ logic\ with\ starting\ the\ game.\ Everytime\ the\ game\ resets\r\n\ this\ method\ is\ run\ again\ and\ reinitialised\ many\ of\ the\ mechanics.\r\n
comment10.params=
comment10.target=void\ setupBoard()
comment10.text=\r\n\ This\ method\ handles\ all\ the\ logic\ with\ displaying\ the\ window\ of\r\n\ the\ game.\r\n
comment11.params=
comment11.target=void\ createCells()
comment11.text=\r\n\ This\ method\ handles\ creating\ the\ cells\ and\ adding\ them\ to\ the\r\n\ board.\ This\ has\ all\ the\ logic\ regarding\ interacting\ with\r\n\ the\ cells\ and\ how\ they\ look.\r\n
comment12.params=e
comment12.target=void\ mousePressed(java.awt.event.MouseEvent)
comment13.params=row\ col
comment13.target=java.util.ArrayList\ getNeighbors(int,\ int)
comment13.text=\r\n\ This\ is\ a\ simple\ method\ which\ returns\ the\ neighbors\ of\ any\r\n\ given\ cell.\r\n
comment14.params=
comment14.target=void\ placeMines()
comment14.text=\r\n\ This\ method\ handles\ placing\ the\ mines\ in\ random\ locations\ and\r\n\ handling\ the\ logic\ behind\ the\ first\ click,\ making\ sure\ the\ first\r\n\ click\ always\ has\ a\ 3x3\ empty\ grid\ around\ it.\r\n
comment15.params=
comment15.target=void\ debugMines()
comment15.text=\r\n\ And\ unused\ method\ which\ placed\ hard\ coded\ mines.\r\n\ This\ was\ only\ using\ during\ the\ beginning\ of\r\n\ development.\r\n
comment16.params=
comment16.target=void\ displayGrid()
comment16.text=\r\n\ This\ function\ handles\ ending\ the\ game.\ It\ disables\ the\ ability\r\n\ to\ interact\ with\ the\ grid\ once\ the\ game\ has\ ended.\ It\ also\ reveals\r\n\ all\ the\ mines\ on\ the\ board\ and\ creates\ the\ restart\ button.\r\n
comment17.params=rows\ cols
comment17.target=void\ checkMine(int,\ int)
comment17.text=\r\n\ This\ method\ handles\ checking\ for\ mines.\ It\ will\ first\ check\ if\r\n\ the\ click\ if\ the\ area\ is\ out\ of\ bounds,\ in\ which\ case\ it\ would\ cancel.\r\n\ It\ will\ then\ loop\ through\ a\ 3x3\ area\ and\ run\ the\ countMine\ function\ for\r\n\ each\ cell.\ Depending\ on\ how\ many\ mines\ are\ found\ it\ will\ display\ the\r\n\ number\ on\ the\ cell\ and\ call\ itself\ on\ the\ cells\ around\ it,\ causing\ a\r\n\ chain\ reaction\ of\ checking\ for\ mines\ until\ it\ reaches\ no\ more\ empty\r\n\ cells\ or\ the\ end\ of\ the\ board.\ This\ method\ also\ hanldes\ the\ win\ logic,\r\n\ checking\ if\ there\ are\ no\ more\ empty\ cells.\r\n
comment18.params=r\ c
comment18.target=int\ countMine(int,\ int)
comment18.text=\r\n\ This\ is\ a\ simple\ method\ which\ returns\ a\ 1\ or\ 0\ depending\r\n\ on\ if\ there\ is\ a\ mine\ on\ a\ specific\ cell.\r\n
comment19.params=
comment19.target=void\ displayInfo()
comment19.text=\r\n\ This\ method\ displays\ the\ information\ for\ the\ player\ including\r\n\ the\ number\ of\ flags\ the\ player\ has\ left,\ the\ number\ of\ empty\ cells\r\n\ remaining,\ and\ the\ time\ the\ player\ has\ been\ playing\ the\ game.\r\n
comment2.params=e
comment2.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment20.params=filePath
comment20.target=void\ playSound(java.lang.String)
comment20.text=\r\n\ This\ method\ can\ be\ called\ from\ anywhere\ and\ will\ play\ a\ .wav\ file\r\n\ from\ the\ computer.\ It\ is\ made\ so\ nothing\ needs\ to\ be\ inputted\r\n\ except\ the\ file\ path\ of\ the\ sound.\r\n
comment3.params=
comment3.target=void\ restartButton()
comment3.text=\r\n\ This\ method\ handles\ the\ logic\ for\ the\ restart\ button.\ It\ changes\r\n\ the\ style\ of\ the\ button\ aswell\ as\ adding\ and\ event\ handler\ which\r\n\ can\ detect\ when\ the\ button\ is\ clicked.\ The\ button\ then\ resets\ the\r\n\ game\ by\ calling\ the\ main\ Minesweeper\ method\ again.\r\n
comment4.params=e
comment4.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment5.params=
comment5.target=void\ reset()
comment5.text=\r\n\ This\ is\ the\ reset\ function\ which\ simply\ deletes\ the\ current\ GUI\r\n\ and\ calls\ the\ Minesweeper\ function\ again\ which\ resets\ the\ game.\r\n
comment6.params=
comment6.target=void\ beginGame()
comment6.text=\r\n\ This\ method\ is\ called\ after\ the\ player\ chooses\ the\ difficulty\ and\r\n\ creates\ the\ level\ the\ player\ will\ be\ interacting\ with.\r\n
comment7.params=
comment7.target=void\ difficultyPanel()
comment7.text=\r\n\ This\ method\ handles\ the\ logic\ for\ the\ difficulty\ swapper.\r\n\ It\ allows\ the\ player\ to\ change\ the\ size\ of\ the\ map\ between\r\n\ three\ different\ options.\ Once\ the\ difficulty\ is\ chosen\ the\r\n\ game\ begins\ and\ the\ ability\ to\ change\ the\ difficulty\ is\ disabled.\r\n
comment8.params=event
comment8.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment9.params=
comment9.target=void\ createFont()
comment9.text=\r\n\ This\ method\ imports\ a\ custom\ font\ from\ the\ computer\ and\r\n\ enables\ it\ to\ be\ used\ by\ different\ parts\ of\ the\ code.\r\n
numComments=21
